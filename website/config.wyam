// Preprocessor directives
#n Wyam.Yaml
#n Wyam.Razor
#n Wyam.Markdown
#n Wyam.CodeAnalysis

#recipe Docs

// Body code
// Normalize the culture for the examples so they produce the same output regardless of system culture
System.Globalization.CultureInfo.DefaultThreadCurrentCulture
    = System.Globalization.CultureInfo.CreateSpecificCulture("en-US");

ContentStreamFactory = new MemoryContentStreamFactory();

Settings[Keys.Host] = "";
Settings[Keys.LinksUseHttps] = false;
Settings[Keys.LinkRoot] = "/";
Settings[DocsKeys.Title] = "NAnt2";
Settings[DocsKeys.Logo] = "/assets/img/logo.png";
Settings[DocsKeys.ProjectFiles] = "../../src/**/{!.vscode,!bin,!obj,!packages,!*.Tests, !NDoc.*.NAnt,}/**/*.csproj";
Settings[DocsKeys.IncludeDateInPostPath] = true;
Settings[DocsKeys.BlogAtomPath] = "blog/feed/atom/index.xml";
Settings[DocsKeys.BlogRssPath] = "blog/feed/rss/index.xml";
Settings[DocsKeys.BlogRdfPath] = null;
Settings[DocsKeys.CaseInsensitiveAuthors] = "true";
Settings[DocsKeys.CaseInsensitiveCategories] = "true";
Settings[DocsKeys.CaseInsensitiveTags] = "true";
Settings[DocsKeys.ImplicitInheritDoc] = true;

/*
Pipelines.InsertBefore(Docs.RenderPages, "References"),
    Execute( ctx =>
        AnalyzeCSharp()
        .WithProjects(ctx.List<string>(DocsKeys.ProjectFiles))
    )
*/
/*
public class KeysModel
{
    public string TargetType { get; set; }
    public string Usage { get; set; } // If null, type will be scanned for const fields, otherwise <metadata> comments will be used
    public bool AlphaSort { get; set; }
    public string Intro { get; set; }

    public KeysModel(string targetType, string usage, bool alphaSort = true)
    {
        TargetType = targetType;
        Usage = usage;
        AlphaSort = alphaSort;
    }

    public KeysModel(string targetType, bool alphaSort = true)
        : this(targetType, null, alphaSort)
    {        
    }
}

Pipelines.InsertBefore(Docs.RenderPages, "References",
    Execute(ctx =>
	    AnalyzeCSharp()
            .WithAssemblies(ctx.List<string>(DocsKeys.AssemblyFiles))
            .WithProjects(ctx.List<string>(DocsKeys.ProjectFiles))
            .WherePublic()
            .WhereNamespaces(n => n.EndsWith("Tasks") || n.EndsWith("Types") || n.EndsWith("Functions") || n.EndsWith("Filters"))
            .WhereSymbol(s => s.GetAttributes()
                              .Any(a => a.AttributeClass.Name == "TaskNameAttribute" //task reference
			                           || a.AttributeClass.Name == "ElementNameAttribute" //type reference
                                       || a.AttributeClass.Name == "FunctionSetAttribute" //function reference
                                    )
                        )
            .WithDocsForImplicitSymbols()
            .WithWritePath(x => {
                string name = x.String("DisplayName").ToLower();
                if(name == "index")
                {
                    name = "idx";  // Special case for the Index module
                }
                
                // Remove generic types
                int genericParamsIndex = name.IndexOf("<");
                if(genericParamsIndex != -1)
                {
                    name = name.Substring(0, genericParamsIndex);
                }
                
                return new FilePath($"references/{name}.html");
            })
    ),
    Branch(
        SearchIndex(new SearchIndexItem(
            @ctx.GetLink(@doc), 
            @doc.String(CodeAnalysisKeys.DisplayName), 
            @doc.String(CodeAnalysisKeys.DisplayName))
        )
            .WithScript((scriptBuilder, context) =>
            {
                // Use a custom tokenizer that splits on camel case characters
                // https://github.com/olivernn/lunr.js/issues/230#issuecomment-244790648
                scriptBuilder.Insert(0, @"
                    var camelCaseTokenizer = function (builder) {
                        var pipelineFunction = function (token) {
                            var previous = '';
                            var tokenStrings = token.toString().trim().split(/[\s\-]+|(?=[A-Z])/).reduce(function(acc, cur) {
                                var current = cur.toLowerCase();
                                if (acc.length === 0) {
                                    previous = current;
                                    return acc.concat(current);
                                }
                                previous = previous.concat(current);
                                return acc.concat([current, previous]);
                            }, []);

                        // return token for each string
                        // will copy any metadata on input token
                        return tokenStrings.map(function(tokenString) {
                        return token.clone(function(str) {
                            return tokenString;
                        })
                        });
                    }
                        
                    lunr.Pipeline.registerFunction(pipelineFunction, 'camelCaseTokenizer')

                    builder.pipeline.before(lunr.stemmer, pipelineFunction)
                    }");
                scriptBuilder.Replace("this.ref('id');", @"this.ref('id'); this.use(camelCaseTokenizer);");
                return scriptBuilder.ToString();
            })
            .WithPath("assets/js/modulesSearchIndex.js"),
        WriteFiles()        
    ),
	Razor().WithLayout("/_RefsLayout.cshtml"),
    Headings(),
    HtmlInsert("div#infobar-headings", @ctx.GenerateInfobarHeadings(@doc)),
	WriteFiles()
);
*/
