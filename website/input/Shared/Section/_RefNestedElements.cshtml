@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System
@using Wyam.Common.Tracing

@model IDocument
@{
    Trace.Information($"[_RefParameters view] recursive calling with level {ViewData["level"]} - Model is {Model.SourceString()}");

    int level = ViewData.ContainsKey("level") ? Convert.ToInt32(ViewData["level"]) : 1;

    @*The same document as Model but retrieved from References pipelines, containing the NAnt meta information*@
    IDocument refModel = (IDocument)NAntUtils.GetNAntReferenceDoc(Model, Context);
    if(refModel == null) 
    {
        Trace.Information($"[_RefParameters view] Reference model not found for {Model.SourceString()}");
    };

    bool hasNestedElements = Model.List<IDocument>("Members") != null
                                && Model.List<IDocument>("Members").Any(x => NAntUtils.IsNAntNestedElement(x)); 
    

    Func<IDocument, (string Name, string ChildName)> GetNestedElementDetails = (propDoc) =>{
		if(NAntUtils.IsNAntNestedElement(propDoc))
		{
			Tuple<object, object, object> details = NAntUtils.GetAttributeDetails(propDoc, NAntUtils.IsNAntNestedElementAttribute);
			return (Name: Convert.ToString(details.Item1) ?? string.Empty, ChildName: Convert.ToString(details.Item2) ?? string.Empty);
		}
		else
		{
			return (Name: string.Empty, ChildName: string.Empty);	
		}
	};

    @* Func<string, IDocument> GetChildElement = (elemName) =>
    {
        return Context.Documents["Reference"]
                    .First( r => r.Get<NAntRefType>(NAntKeys.NAntRefType) != NAntRefType.None
                                        && r.Id == doc.Id 
                                        && r.String(CodeAnalysisKeys.SymbolId) == doc.String(CodeAnalysisKeys.SymbolId));
    }; *@
}

@if(hasNestedElements)
{
    var heading = level == 1 ? "h1" : "h3";
    var headingId = level == 1 ? "NestedElements" : Model.String("Name") + "NestedElements";
    var divClass = "container-fluid";

    @Html.Raw($@"<{heading} id=""{headingId}"">Nested elements</{heading}>");
    <div class="@divClass">
        @{
            IList<IDocument> nestedElements =  Model.List<IDocument>("Members")
                                            .Where(x => NAntUtils.IsNAntNestedElement(x))
                                            .OrderBy(x => x["DisplayName"])
                                            .ToList();
            Trace.Information($"[_RefParameters view] Found {(nestedElements == null ? 0 : nestedElements.Count)} nested elements for {Model.SourceString()}");
        }
        @foreach(IDocument nElemDoc in nestedElements)
        {
            var newViewData = new ViewDataDictionary(this.ViewData);
            newViewData["level"] = level + 1;
            Trace.Information($"[_RefNestedElements view] recursive calling with level {newViewData["level"]} for document {nElemDoc.SourceString()}");
            Html.RenderPartial("Section\\_RefNestedElements", nElemDoc, newViewData);
        }
    </div>
}
@if(NAntUtils.IsNAntNestedSingleElement(Model))
{
    @*The document for Model type: the one contained in Model and the one retrieved from References pipelines, containing the NAnt meta information *@
    IDocument type = Model.Get<IDocument>("Type");
    IDocument refType = (IDocument)NAntUtils.GetNAntReferenceDoc(type, Context);

    @* Trace.Information($"[_RefParameters view] level {ViewData["level"]}. Document '{Model.SourceString()}' is nested single element and it's ref doc is {NAntUtils.DocToJson(type, Context)}"); *@
    @* Trace.Information($"[_RefParameters view] level {ViewData["level"]}. Document '{Model.SourceString()}' type is {refType.String(NAntKeys.NAntDisplayName)}"); *@

    var linkName = GetNestedElementDetails(Model).Name;
    var link = type == null ? string.Empty : Context.GetLink(refType.FilePath(Keys.WritePath));
    var obsolete = NAntUtils.GetObsoleteDetails(refModel);

    <div class="row">
        <h2>
            <a href="@link">&lt;@(linkName)&gt;</a>
            @if(obsolete.Obsolete)
            {
                <i class="fa fa-exclamation-triangle text-warning" aria-hidden="true"></i>
            }
        </h2>
        <div class="col-xs-@(13-level) col-xs-offset-@(level-1) col-sm-@(13-level) col-sm-offset-@(level-1) col-md-@(13-level) col-md-offset-@(level-1) col-lg-@(13-level) col-lg-offset-@(level-1)">
            <p>@Html.Raw(Model.Get("Summary"))</p>
            <p>@Html.Raw(type.Get("Summary"))</p>
            <p>@Html.Raw(type.String("Remarks"))</p>
            @if(obsolete.Obsolete)
            {
                <div class="alert alert-warning">
                    <i>Obsolete. @Html.Raw(obsolete.Details)</i>
                </div>
            }
            @{
                var newViewData = new ViewDataDictionary(this.ViewData);
                Trace.Information($"[_RefNestedElements view] _RefParameters calling with level {newViewData["level"]} for document {refModel.SourceString()}");
                Html.RenderPartial("Section\\_RefParameters", refType, newViewData);
                Html.RenderPartial("Section\\_RefNestedElements", refType, newViewData);
            }
        </div>
        <h2><a href="@link">&lt;/@(linkName)&gt;</a></h2>
    </div>
}
@if(NAntUtils.IsNAntNestedCollectionElement(Model))
{
    var collectionElement = GetNestedElementDetails(Model);
    var obsolete = NAntUtils.GetObsoleteDetails(refModel);

    <div class="row">
        <h2>NAnt nested collection -
            &lt;@(collectionElement.Name)&gt;
             @if(obsolete.Obsolete)
            {
                <i class="fa fa-exclamation-triangle text-warning" aria-hidden="true"></i>
            }
        </h2>
        <div class="col-xs-@(13-level) col-xs-offset-@(level-1) col-sm-@(13-level) col-sm-offset-@(level-1) col-md-@(13-level) col-md-offset-@(level-1) col-lg-@(13-level) col-lg-offset-@(level-1)">
            
            <p>@Html.Raw(Model.Get("Summary"))</p>
             @if(obsolete.Obsolete)
            {
                <div class="alert alert-warning">
                    <i>Obsolete. @Html.Raw(obsolete.Details)</i>
                </div>
            } 
            @*find IDocument that corresponds to Type returned by the Add method of the collection*@
        </div>
        <h2>&lt;@(collectionElement.Name)&gt;</h2>
    </div>
} 