@using Microsoft.AspNetCore.Html
@using System
@using Wyam.Common.Tracing
@{
	NAntRefType docType = Model.Get<NAntRefType>(NAntKeys.NAntRefType);
	
	Func<IDocument, (string Name, bool Required)> GetTaskDetails = (propDoc) =>{		
		Tuple<object, object> details = NAntUtils.GetAttributeDetails(propDoc, NAntUtils.IsNAntParameterAttribute);
		return (Name: Convert.ToString(details.Item1) ?? string.Empty, Required: Convert.ToBoolean(details.Item2));
	};

	Func<IDocument, (bool Obsolete, string Details)> GetObsoleteDetails = (propDoc) =>{
		if(NAntUtils.IsNAntObsolete(propDoc))
		{
			Tuple<object, object> details = NAntUtils.GetAttributeDetails(propDoc, NAntUtils.IsNAntObsoleteAttribute);
			return (Obsolete: true, Details: Convert.ToString(details.Item1) ?? string.Empty);
		}
		else
		{
			return (Obsolete: false, Details: string.Empty);	
		}
	};

	IList<IDocument> properties =  Model.List<IDocument>("Members")
										?.Where(x => NAntUtils.IsNAntParameter(x))
										?.OrderBy(x => x["DisplayName"])
										?.ToList();
	IList<IDocument> baseProperties = Model.List<IDocument>(CodeAnalysisKeys.BaseTypes)
											?.Where(bt => bt.List<IDocument>("Members") != null)
											?.SelectMany(bt => bt.List<IDocument>("Members"))
											?.Where(x => x != null && NAntUtils.IsNAntParameter(x))
											?.OrderBy(x => x["DisplayName"])
											?.Distinct()
											?.ToList();
}
@{
    if(properties != null && properties.Count > 0)
    {
        <text>
			<h1 id="Parameters">Parameters</h1>
			<div class="box">
				<div class="box-body no-padding table-responsive">
					<table class="table table-striped table-hover four-cols">
						<thead>
							<tr>
								<th>Attribute</th>
								<th>Type</th>
								<th>Description</th>
                                <th>Required</th>
							</tr>
						</thead>
                        <tbody>
							@foreach(IDocument property in properties)
							{
								@if(!baseProperties.Contains(property))
								{
									IDocument type = property.Get<IDocument>("Type");
									var details = GetTaskDetails(property);
									var obsolete = GetObsoleteDetails(property);
									<tr>
										<td>
											<b>
												@details.Name
												@if(obsolete.Obsolete)
												{
													<i class="fa fa-exclamation-triangle text-warning" aria-hidden="true"></i>
												}
											</b>
										</td>
										<td>@(type == null ? new HtmlString(string.Empty) : Context.GetTypeLink(type))</td>
										<td>
											<div>@Html.Raw(property.String("Summary"))</div>
											@if(obsolete.Obsolete)
											{
												<div class="alert alert-warning">
													<i>Obsolete. @Html.Raw(obsolete.Details)</i>
												</div>
											}
										</td>
										<td>
											@details.Required
										</td>
									</tr>
								}
							}
							@if(baseProperties != null)
							{
								@foreach(IDocument property in baseProperties)
								{
									IDocument type = property.Get<IDocument>("Type");
									var details = GetTaskDetails(property);
									var obsolete = GetObsoleteDetails(property);
									<tr>
										<td>
											@details.Name
											@if(obsolete.Obsolete)
											{
												<i class="fa fa-exclamation-triangle text-warning" aria-hidden="true"></i>
											}
										</td>
										<td>@(type == null ? new HtmlString(string.Empty) : Context.GetTypeLink(type))</td>
										<td>
											<div>@Html.Raw(property.String("Summary"))</div>
											@if(obsolete.Obsolete)
											{
												<div class="alert alert-warning">
													<i>Obsolete. @Html.Raw(obsolete.Details)</i>
												</div>
											}
										</td>
										<td>
											@details.Required
										</td>
									</tr>
								}
							}
                        </tbody>
					</table>
				</div>
			</div>
		</text>
    }
}