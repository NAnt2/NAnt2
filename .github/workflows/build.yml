name: NAnt2 build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: NAnt2
  #Project version
  PROJECT_VERSION: 0.95

jobs:
  win-build:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install CMake; NMake is provided by default
        run: |
                choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
                call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
                where resgen
        shell: cmd
      - name: Install .NET 4.5 SDK (Windows 8)
        run: |
                $sdk45Url = "http://download.microsoft.com/download/F/1/3/F1300C9C-A120-4341-90DF-8A52509B23AC/standalonesdk/sdksetup.exe"
                $sdk45Path = Join-Path $env:TEMP "sdksetup.exe"
                Write-Output "downloading $sdk45Url"
                Invoke-WebRequest -Uri $sdk45Url -OutFile $sdk45Path
                Write-Output "installing $sdk45Path"
                Start-Process $sdk45Path -Verb runas -ArgumentList "/q /norestart /ceip off /features OptionId.NetFxSoftwareDevelopmentKit" -Wait
        shell: pwsh
      - name: Install mono on Windows
        run: choco install -y mono
        shell: cmd
      - name: Check mono version
        run: |
                SET "monoPath=c:\Program Files\Mono\bin"
                SET PATH=%PATH%;%monoPath%
                mono --version
        shell: cmd
      - name: Build with nmake on Windows
        run: |
              call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
              nmake -f Makefile.nmake build-nant prefix="" TARGET=net-4.5 build=${{github.run_number}} version=${{env.PROJECT_VERSION}}
        shell: cmd
      - name: Run tests with nmake on Windows
        run: |
                call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
                nmake -f Makefile.nmake run-test prefix="" TARGET=net-4.5 build=${{github.run_number}} version=${{env.PROJECT_VERSION}}
        shell: cmd
      - name: Build with make on Windows
        run: |
                SET "monoPath=c:\Program Files\Mono\bin"
                SET PATH=%PATH%;%monoPath%
                make clean build-nant TARGET=mono-4.5 MCS="mcs -sdk:4.5" build=${{github.run_number}} version=${{env.PROJECT_VERSION}}
        shell: cmd
      - name: Run tests with make on Windows
        run: |
                SET "monoPath=c:\Program Files\Mono\bin"
                SET PATH=%PATH%;%monoPath%
                make clean run-tests TARGET=mono-4.5 MCS="mcs -sdk:4.5" build=${{github.run_number}} version=${{env.PROJECT_VERSION}}
        shell: cmd
  nix-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check mono version
        run: mono --version
        shell: bash
      - name: Ensure mono is found using pkg-config
        run: |
              if [ "${RUNNER_OS}" == "macOS" ]; then
                export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig/
              fi
        shell: bash
      - name: Build with make
        run: make clean build-nant TARGET=mono-4.5 MCS="mcs -sdk:4.5" build=${{github.run_number}} version=${{env.PROJECT_VERSION}}
        shell: bash
      - name: Run tests with make
        run: make clean run-tests TARGET=mono-4.5 MCS="mcs -sdk:4.5" build=${{github.run_number}} version=${{env.PROJECT_VERSION}}